# .github/workflows/build.yml - Avec Snap
name: Build Todo CLI Go

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build with version injection
      run: make build

    - name: Test binary
      run: |
        echo "=== Binary info ==="
        ls -la todo
        file todo

        echo "=== version ==="
        ./todo version

        echo "=== Afficher l'aide ===="
        ./todo help

    - name: Run tests
      run: make test-short

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: todo-linux-${{ github.sha }}
        path: todo
        retention-days: 30

  # Job pour releases avec binaires + snap
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    # Build des binaires classiques
    - name: Build release binaries
      run: |
        echo "Building release binaries..."

        # Linux
        make build
        mv todo todo-linux-amd64

        # Windows
        GOOS=windows GOARCH=amd64 make build
        mv todo.exe todo-windows-amd64.exe 2>/dev/null || mv todo todo-windows-amd64.exe

        # macOS
        GOOS=darwin GOARCH=amd64 make build
        mv todo todo-darwin-amd64

        # V√©rifier les binaires cr√©√©s
        ls -la todo-*

    # Build du Snap
    - name: Build Snap
      uses: snapcore/action-build@v1
      id: build-snap

    - name: Rename snap file
      run: |
        # Renommer le snap avec le nom du tag
        TAG_NAME=${GITHUB_REF#refs/tags/}
        mv *.snap todo-cli-go_${TAG_NAME}_amd64.snap
        ls -la *.snap

    # Cr√©er la release avec tous les formats
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          todo-linux-amd64
          todo-windows-amd64.exe
          todo-darwin-amd64
          *.snap
        generate_release_notes: true
        body: |
          ## üöÄ Todo CLI Go ${{ github.ref_name }}

          Gestionnaire de t√¢ches en ligne de commande avec injection de version automatique.

          ### üì¶ T√©l√©chargements

          #### Binaires classiques
          - **Linux**: `todo-linux-amd64`
          - **Windows**: `todo-windows-amd64.exe`
          - **macOS**: `todo-darwin-amd64`

          #### Package Snap (Linux)
          - **Snap**: `todo-cli-go_${{ github.ref_name }}_amd64.snap`

          ### üõ†Ô∏è Installation

          #### Linux / macOS
          ```bash
          # T√©l√©charger et rendre ex√©cutable
          chmod +x todo-linux-amd64

          # Test local
          ./todo-linux-amd64 help

          # Installation globale (optionnelle)
          sudo mv todo-linux-amd64 /usr/local/bin/todo

          # Utilisation globale
          todo help
          ```

          #### Installation Snap (Linux) - Confinement strict
          ```bash
          # T√©l√©charger le fichier .snap
          wget https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo-cli-go_${{ github.ref_name }}_amd64.snap

          # Installer le snap (mode dangerous car non publi√© sur store)
          sudo snap install --dangerous todo-cli-go_${{ github.ref_name }}_amd64.snap

          # Connecter les interfaces pour acc√®s √©tendus
          sudo snap connect todo-cli-go:removable-media     # Cl√©s USB
          sudo snap connect todo-cli-go:mount-observe       # Points de montage
          sudo snap connect todo-cli-go:network-bind        # R√©seau (optionnel)

          # V√©rifier les connexions
          snap connections todo-cli-go

          # Utilisation
          todo-cli-go version
          # Ou avec l'alias court
          todo version

          # Test d'acc√®s aux cl√©s USB (apr√®s connexion interface)
          todo export /media/username/USB_DRIVE/backup.csv
          ```

          #### Windows
          ```powershell
          # 1. Cr√©er un dossier pour vos binaires (une seule fois)
          mkdir C:\tools

          # 2. D√©placer le binaire
          move todo-windows-amd64.exe C:\tools\todo.exe

          # 3. Ajouter au PATH (PowerShell Admin requis)
          $env:PATH += ";C:\tools"

          # 4. Rendre permanent (PowerShell Admin)
          [Environment]::SetEnvironmentVariable("PATH", $env:PATH + ";C:\tools", [EnvironmentVariableTarget]::Machine)

          # 5. Red√©marrer PowerShell/CMD et tester
          todo help
          ```

          #### Alternative Windows (Interface graphique)
          ```
          1. D√©placer todo-windows-amd64.exe vers C:\tools\todo.exe
          2. Touche Windows + R ‚Üí sysdm.cpl ‚Üí Avanc√©
          3. Variables d'environnement ‚Üí PATH (syst√®me) ‚Üí Modifier
          4. Ajouter : C:\tools
          5. OK ‚Üí OK ‚Üí Red√©marrer terminal
          6. Tester : todo help
          ```

          #### Installation rapide (tous OS)
          ```bash
          # Linux/macOS : Binaire direct
          curl -L https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo-linux-amd64 -o todo && chmod +x todo && sudo mv todo /usr/local/bin/

          # Windows (PowerShell) : T√©l√©chargement + installation
          Invoke-WebRequest -Uri "https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo-windows-amd64.exe" -OutFile "C:\tools\todo.exe"

          # Linux Snap : Installation avec permissions
          wget https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo-cli-go_${{ github.ref_name }}_amd64.snap
          sudo snap install --dangerous todo-cli-go_${{ github.ref_name }}_amd64.snap
          sudo snap connect todo-cli-go:removable-media
          ```

          ### ‚ú® Fonctionnalit√©s
          - Gestion compl√®te des t√¢ches (add, list, done, remove, edit)
          - Export/Import CSV
          - Tags et priorit√©s
          - Filtrage avanc√©
          - Version inject√©e automatiquement

          ### üîê Snap - Confinement strict avec interfaces

          Le package Snap utilise un **confinement strict** pour une s√©curit√© maximale.

          **Interfaces automatiques :**
          - üè† R√©pertoire home (`home`)
          - üåê R√©seau de base (`network`)

          **Interfaces manuelles (optionnelles) :**
          ```bash
          # Pour acc√®s aux cl√©s USB et disques externes
          sudo snap connect todo-cli-go:removable-media

          # Pour observer les points de montage (partages r√©seau)
          sudo snap connect todo-cli-go:mount-observe

          # Pour √©coute r√©seau (si n√©cessaire)
          sudo snap connect todo-cli-go:network-bind
          ```

          **V√©rification des permissions :**
          ```bash
          snap connections todo-cli-go
          ```

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
