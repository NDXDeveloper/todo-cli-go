# .github/workflows/build.yml - Avec Snap et DEB
name: Build Todo CLI Go

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Build with version injection
      run: make build

    - name: Test binary
      run: |
        echo "=== Binary info ==="
        ls -la todo
        file todo

        echo "=== version ==="
        ./todo version

        echo "=== Afficher l'aide ===="
        ./todo help

    - name: Run tests
      run: make test-short

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: todo-linux-${{ github.sha }}
        path: todo
        retention-days: 30

  # Job pour releases avec binaires + snap + deb + installateurs Windows
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    # Build des binaires classiques
    - name: Build release binaries
      run: |
        echo "Building release binaries..."

        # Linux
        make build
        mv todo todo-linux-amd64

        # Windows
        GOOS=windows GOARCH=amd64 make build
        mv todo.exe todo-windows-amd64.exe 2>/dev/null || mv todo todo-windows-amd64.exe

        # macOS
        GOOS=darwin GOARCH=amd64 make build
        mv todo todo-darwin-amd64

        # V√©rifier les binaires cr√©√©s
        ls -la todo-*

    # Build du package DEB
    - name: Build DEB package
      run: |
        # Installer nfpm
        wget https://github.com/goreleaser/nfpm/releases/download/v2.43.0/nfpm_2.43.0_amd64.deb
        sudo dpkg -i nfpm_2.43.0_amd64.deb

        # Extraire la version du tag
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}  # Supprimer le 'v' du d√©but

        echo "Building DEB package for version: $VERSION"

        # Remplacer la version dans nfpm.yaml et cr√©er le package
        sed "s/\${VERSION}/$VERSION/g" nfpm.yaml > nfpm-build.yaml
        nfpm pkg --packager deb --config nfpm-build.yaml --target todo_${TAG_NAME}_amd64.deb

        # V√©rifier le package cr√©√©
        ls -la *.deb
        dpkg --info todo_${TAG_NAME}_amd64.deb

        rm nfpm_2.43.0_amd64.deb

    # Build du Snap
    - name: Build Snap
      uses: snapcore/action-build@v1
      id: build-snap

    - name: Rename snap file
      run: |
        # Renommer le snap avec le nom du tag
        TAG_NAME=${GITHUB_REF#refs/tags/}
        mv *.snap todo_${TAG_NAME}_amd64.snap
        ls -la *.snap


    # Build des installateurs Windows avec NSIS
    - name: Build Windows Installers
      run: |
        echo "Installing NSIS..."
        sudo apt-get update
        sudo apt-get install -y nsis

        echo "Building Windows installers..."
        TAG_NAME=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_NAME#v}

        # Copier le binaire Windows dans le dossier nsis pour les scripts
        cp todo-windows-amd64.exe nsis/

        # Se placer dans le dossier nsis
        cd nsis

        # Cr√©er les scripts NSIS avec la bonne version
        sed "s/VERSIONBUILD 9/VERSIONBUILD ${VERSION##*.}/g; s/VERSIONMINOR 0/VERSIONMINOR ${VERSION%.*}/ ; s/VERSIONMAJOR 0/VERSIONMAJOR ${VERSION%%.*}/" installer_user.nsi > installer-user-${TAG_NAME}.nsi
        sed "s/VERSIONBUILD 9/VERSIONBUILD ${VERSION##*.}/g; s/VERSIONMINOR 0/VERSIONMINOR ${VERSION%.*}/ ; s/VERSIONMAJOR 0/VERSIONMAJOR ${VERSION%%.*}/" installer_admin.nsi > installer-admin-${TAG_NAME}.nsi

        # Compiler les installateurs
        echo "Compiling user installer..."
        makensis installer-user-${TAG_NAME}.nsi

        echo "Compiling admin installer..."
        makensis installer-admin-${TAG_NAME}.nsi

        # Renommer les installateurs g√©n√©r√©s
        mv todo-setup-noadmin-*.exe todo-setup-user-${TAG_NAME}.exe
        mv todo-setup-admin-*.exe todo-setup-admin-${TAG_NAME}.exe

        # D√©placer les installateurs vers la racine
        mv *.exe ../

        rm ../todo-windows-amd64.exe


        # Retourner √† la racine et v√©rifier
        cd ..
        ls -la *.exe
        file *.exe

    # Cr√©er la release avec tous les formats
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          todo-linux-amd64
          todo-windows-amd64.exe
          todo-darwin-amd64
          *.snap
          *.deb
          *.exe
        generate_release_notes: true
        body: |
          ## üöÄ Todo CLI Go ${{ github.ref_name }}

          Gestionnaire de t√¢ches en ligne de commande.

          ### üì¶ T√©l√©chargements

          #### Binaires classiques
          - **Linux**: `todo-linux-amd64`
          - **macOS**: `todo-darwin-amd64`

          #### Installateurs Windows üÜï
          - **Installation utilisateur** (sans admin): `todo-setup-user-${{ github.ref_name }}.exe`
          - **Installation syst√®me** (admin requis): `todo-setup-admin-${{ github.ref_name }}.exe`

          #### Package Snap (Linux)
          - **Snap**: `todo_${{ github.ref_name }}_amd64.snap`

          #### Package DEB (Ubuntu/Debian)
          - **DEB**: `todo_${{ github.ref_name }}_amd64.deb`

          ### üõ†Ô∏è Installation Windows

          #### Option 1: Installateur utilisateur (recommand√©)
          ```powershell
          # T√©l√©charger et ex√©cuter (aucun droit admin requis)
          # Double-clic sur: todo-setup-user-${{ github.ref_name }}.exe
          ```
          - ‚úÖ Installation dans `%LOCALAPPDATA%`
          - ‚úÖ PATH utilisateur configur√© automatiquement
          - ‚úÖ Aucun droit administrateur requis
          - ‚úÖ D√©sinstallation propre

          #### Option 2: Installateur syst√®me
          ```powershell
          # T√©l√©charger et ex√©cuter (droits admin requis)
          # Clic-droit ‚Üí "Ex√©cuter en tant qu'administrateur" sur: todo-setup-admin-${{ github.ref_name }}.exe
          ```
          - ‚úÖ Installation dans `C:\Program Files`
          - ‚úÖ PATH syst√®me configur√© pour tous les utilisateurs
          - ‚úÖ Installation centralis√©e

          #### Option 3: Binaire portable
          ```powershell
          # T√©l√©charger todo-windows-amd64.exe
          # Placer dans un dossier de votre choix
          # Ajouter manuellement au PATH
          ```

          ### üõ†Ô∏è Installation Linux / macOS

          #### Linux / macOS
          ```bash
          # T√©l√©charger et rendre ex√©cutable
          chmod +x todo-linux-amd64

          # Test local
          ./todo-linux-amd64 help

          # Installation globale (optionnelle)
          sudo mv todo-linux-amd64 /usr/local/bin/todo

          # Utilisation globale
          todo help
          ```

          #### Installation Snap (Linux) - Confinement strict
          ```bash
          # T√©l√©charger le fichier .snap
          wget https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo_${{ github.ref_name }}_amd64.snap

          # Installer le snap (mode dangerous car non publi√© sur store)
          sudo snap install --dangerous todo_${{ github.ref_name }}_amd64.snap

          # Connecter les interfaces pour acc√®s √©tendus
          sudo snap connect todo:removable-media     # Cl√©s USB
          sudo snap connect todo:mount-observe       # Points de montage

          # V√©rifier les connexions
          snap connections todo

          # Utilisation directe - commande "todo" disponible !
          todo version
          todo help

          # Test d'acc√®s aux cl√©s USB (apr√®s connexion interface)
          todo export /media/username/USB_DRIVE/backup.csv
          ```

          #### Installation DEB (Ubuntu/Debian) - Acc√®s complet syst√®me
          ```bash
          # T√©l√©charger le fichier .deb
          wget https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo_${{ github.ref_name }}_amd64.deb

          # Installer le package (g√®re automatiquement les d√©pendances)
          sudo apt install ./todo_${{ github.ref_name }}_amd64.deb

          # Ou avec dpkg (puis r√©soudre les d√©pendances si n√©cessaire)
          sudo dpkg -i todo_${{ github.ref_name }}_amd64.deb
          sudo apt-get install -f  # R√©soudre les d√©pendances manquantes

          # Utilisation directe - commande "todo" disponible globalement !
          todo version
          todo help

          # D√©sinstallation propre
          sudo apt remove todo
          ```

          #### Installation rapide (tous OS)
          ```bash
          # Linux/macOS : Binaire direct
          curl -L https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo-linux-amd64 -o todo && chmod +x todo && sudo mv todo /usr/local/bin/

          # Linux Snap : Installation avec permissions
          wget https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo_${{ github.ref_name }}_amd64.snap
          sudo snap install --dangerous todo_${{ github.ref_name }}_amd64.snap
          sudo snap connect todo:removable-media

          # Linux DEB : Installation simple
          wget https://github.com/NDXDeveloper/todo-cli-go/releases/download/${{ github.ref_name }}/todo_${{ github.ref_name }}_amd64.deb
          sudo apt install ./todo_${{ github.ref_name }}_amd64.deb
          ```

          ### ‚ú® Fonctionnalit√©s
          - Gestion compl√®te des t√¢ches (add, list, done, remove, edit)
          - Export/Import CSV
          - Tags et priorit√©s
          - Filtrage avanc√©
          - Version inject√©e automatiquement

          ### üîê Snap - Confinement strict avec interfaces

          Le package Snap utilise un **confinement strict** pour une s√©curit√© maximale.

          **Interfaces automatiques :**
          - üè† R√©pertoire home (`home`)
          - üåê R√©seau de base (`network`)

          **Interfaces manuelles (optionnelles) :**
          ```bash
          # Pour acc√®s aux cl√©s USB et disques externes
          sudo snap connect todo:removable-media

          # Pour observer les points de montage (partages r√©seau)
          sudo snap connect todo:mount-observe
          ```

          **V√©rification des permissions :**
          ```bash
          snap connections todo
          ```

          ### üéØ Avantages par format

          **Snap** : Confinement s√©curis√©, auto-updates, sandboxing
          **DEB** : Installation native, acc√®s syst√®me complet, familier


      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
