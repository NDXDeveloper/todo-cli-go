// cli_test.go - Tests d'int√©gration CLI
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"testing"
	"time"
)

// CLITestHelper aide pour les tests CLI
type CLITestHelper struct {
	tempDir    string
	todoFile   string
	binaryPath string
	cleanup    func()
}

// setupCLITest pr√©pare l'environnement pour les tests CLI
func setupCLITest(t *testing.T) *CLITestHelper {
	// Cr√©er r√©pertoire temporaire
	tempDir, err := ioutil.TempDir("", "todo_cli_test")
	if err != nil {
		t.Fatalf("Impossible de cr√©er le r√©pertoire temporaire: %v", err)
	}

	// D√©finir le chemin du fichier todo
	todoDir := filepath.Join(tempDir, ".todo")
	err = os.MkdirAll(todoDir, 0755)
	if err != nil {
		t.Fatalf("Impossible de cr√©er le r√©pertoire .todo: %v", err)
	}

	todoFile := filepath.Join(todoDir, "todo.json")

	// Compiler le binaire pour les tests
	binaryPath := filepath.Join(tempDir, "todo_test")
	if runtime.GOOS == "windows" {
		binaryPath += ".exe"
	}

	// Fonction de nettoyage
	cleanup := func() {
		os.RemoveAll(tempDir)
		if _, err := os.Stat(binaryPath); err == nil {
			os.Remove(binaryPath)
		}
	}

	return &CLITestHelper{
		tempDir:    tempDir,
		todoFile:   todoFile,
		binaryPath: binaryPath,
		cleanup:    cleanup,
	}
}

// compileBinary compile le binaire de test
func (h *CLITestHelper) compileBinary(t *testing.T) {
	// CORRECTION: Compiler seulement main.go et import.go, pas les tests
	cmd := exec.Command("go", "build", "-o", h.binaryPath, "main.go", "import.go")
	cmd.Env = append(os.Environ(), "HOME="+h.tempDir, "USERPROFILE="+h.tempDir)

	output, err := cmd.CombinedOutput()
	if err != nil {
		t.Fatalf("Impossible de compiler le binaire: %v\nSortie: %s", err, output)
	}
}

// runCommand ex√©cute une commande todo et retourne la sortie
// runCommand ex√©cute une commande todo et retourne la sortie
func (h *CLITestHelper) runCommand(args ...string) (string, string, int, error) {
	cmd := exec.Command(h.binaryPath, args...)
	cmd.Env = append(os.Environ(), "HOME="+h.tempDir, "USERPROFILE="+h.tempDir)

	// AJOUTER CETTE LIGNE ICI ‚¨áÔ∏è
	cmd.Dir = h.tempDir

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	exitCode := 0
	if err != nil {
		if exitError, ok := err.(*exec.ExitError); ok {
			exitCode = exitError.ExitCode()
		} else {
			return "", "", -1, err
		}
	}

	return stdout.String(), stderr.String(), exitCode, nil
}

// assertCommandSuccess v√©rifie qu'une commande s'ex√©cute avec succ√®s
func (h *CLITestHelper) assertCommandSuccess(t *testing.T, args ...string) string {
	t.Helper()
	stdout, stderr, exitCode, err := h.runCommand(args...)
	if err != nil {
		t.Fatalf("Erreur lors de l'ex√©cution de la commande %v: %v", args, err)
	}
	if exitCode != 0 {
		t.Fatalf("Commande %v a √©chou√© (code %d)\nStdout: %s\nStderr: %s",
			args, exitCode, stdout, stderr)
	}
	return stdout
}

// assertCommandFails v√©rifie qu'une commande √©choue
func (h *CLITestHelper) assertCommandFails(t *testing.T, expectedExitCode int, args ...string) {
	t.Helper()
	_, _, exitCode, err := h.runCommand(args...)
	if err != nil && exitCode == -1 {
		t.Fatalf("Erreur inattendue lors de l'ex√©cution: %v", err)
	}
	if exitCode != expectedExitCode {
		t.Fatalf("Code de sortie attendu %d, obtenu %d pour la commande %v",
			expectedExitCode, exitCode, args)
	}
}

// debugEnvironment aide au debug des probl√®mes de fichiers
func (h *CLITestHelper) debugEnvironment(t *testing.T) {
	t.Helper()

	// Lister les fichiers dans tempDir
	files, err := ioutil.ReadDir(h.tempDir)
	if err == nil {
		t.Logf("Fichiers dans tempDir (%s):", h.tempDir)
		for _, file := range files {
			t.Logf("  %s", file.Name())
		}
	}

	// Lister les fichiers dans .todo
	todoDir := filepath.Join(h.tempDir, ".todo")
	files, err = ioutil.ReadDir(todoDir)
	if err == nil {
		t.Logf("Fichiers dans .todo:")
		for _, file := range files {
			t.Logf("  %s", file.Name())
		}
	}

	// V√©rifier le fichier todo.json
	if _, err := os.Stat(h.todoFile); err == nil {
		content, _ := ioutil.ReadFile(h.todoFile)
		t.Logf("Contenu de todo.json: %s", string(content))
	} else {
		t.Logf("todo.json n'existe pas: %v", err)
	}
}

// Tests CLI de base

func TestCLI_Add(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("ajout simple", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "add", "Ma premi√®re t√¢che")

		if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
			t.Errorf("Message de succ√®s manquant dans: %s", output)
		}
		if !strings.Contains(output, "[1]") {
			t.Errorf("ID de t√¢che manquant dans: %s", output)
		}
	})

	t.Run("ajout avec tags et priorit√©", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "add", "T√¢che avec options",
			"+dev", "@bureau", "--priority=high", "--due=2025-07-20")

		if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
			t.Errorf("Message de succ√®s manquant: %s", output)
		}
		if !strings.Contains(output, "Priority: high") {
			t.Errorf("Priorit√© manquante dans la sortie: %s", output)
		}
		if !strings.Contains(output, "[+dev @bureau]") {
			t.Errorf("Tags manquants dans la sortie: %s", output)
		}
	})

	t.Run("ajout sans texte", func(t *testing.T) {
		h.assertCommandFails(t, 1, "add")
	})

	t.Run("ajout avec date invalide", func(t *testing.T) {
		h.assertCommandFails(t, 1, "add", "Test", "--due=2025-13-50")
	})
}

func TestCLI_List(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	// Ajouter quelques t√¢ches de test
	h.assertCommandSuccess(t, "add", "T√¢che 1", "+dev", "@bureau", "--priority=high")
	h.assertCommandSuccess(t, "add", "T√¢che 2", "+perso", "@maison", "--priority=medium")
	h.assertCommandSuccess(t, "add", "T√¢che 3", "+dev", "@maison", "--priority=low")

	t.Run("list basique", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "list")

		// V√©rifier que les 3 t√¢ches sont list√©es
		if !strings.Contains(output, "T√¢che 1") {
			t.Errorf("T√¢che 1 manquante: %s", output)
		}
		if !strings.Contains(output, "T√¢che 2") {
			t.Errorf("T√¢che 2 manquante: %s", output)
		}
		if !strings.Contains(output, "T√¢che 3") {
			t.Errorf("T√¢che 3 manquante: %s", output)
		}

		// V√©rifier le tri par priorit√© (high doit √™tre en premier)
		lines := strings.Split(strings.TrimSpace(output), "\n")
		if len(lines) < 3 {
			t.Errorf("Nombre de lignes insuffisant: %d", len(lines))
		}

		// La premi√®re ligne doit contenir la t√¢che avec priorit√© high
		if !strings.Contains(lines[0], "‚ùó") { // Ic√¥ne priorit√© high
			t.Errorf("Tri par priorit√© incorrect: %s", lines[0])
		}
	})

	t.Run("filtrage par projet", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "list", "--project=dev")

		if !strings.Contains(output, "T√¢che 1") {
			t.Errorf("T√¢che 1 devrait √™tre incluse: %s", output)
		}
		if !strings.Contains(output, "T√¢che 3") {
			t.Errorf("T√¢che 3 devrait √™tre incluse: %s", output)
		}
		if strings.Contains(output, "T√¢che 2") {
			t.Errorf("T√¢che 2 ne devrait pas √™tre incluse: %s", output)
		}
	})

	t.Run("filtrage par contexte", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "list", "--context=maison")

		if !strings.Contains(output, "T√¢che 2") {
			t.Errorf("T√¢che 2 devrait √™tre incluse: %s", output)
		}
		if !strings.Contains(output, "T√¢che 3") {
			t.Errorf("T√¢che 3 devrait √™tre incluse: %s", output)
		}
		if strings.Contains(output, "T√¢che 1") {
			t.Errorf("T√¢che 1 ne devrait pas √™tre incluse: %s", output)
		}
	})

	t.Run("filtrage par priorit√©", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "list", "--priority=high")

		if !strings.Contains(output, "T√¢che 1") {
			t.Errorf("T√¢che 1 devrait √™tre incluse: %s", output)
		}
		if strings.Contains(output, "T√¢che 2") || strings.Contains(output, "T√¢che 3") {
			t.Errorf("Seule la t√¢che 1 devrait √™tre incluse: %s", output)
		}
	})

	t.Run("liste vide", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "list", "--project=inexistant")

		if !strings.Contains(output, "üìù Aucune t√¢che trouv√©e") {
			t.Errorf("Message 'aucune t√¢che' manquant: %s", output)
		}
	})
}

func TestCLI_Done(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	// Ajouter une t√¢che de test
	h.assertCommandSuccess(t, "add", "T√¢che √† terminer")

	t.Run("marquer t√¢che comme termin√©e", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "done", "1")

		if !strings.Contains(output, "‚úÖ T√¢che [1] marqu√©e comme termin√©e") {
			t.Errorf("Message de succ√®s manquant: %s", output)
		}

		// V√©rifier que la t√¢che n'appara√Æt plus dans la liste par d√©faut
		listOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listOutput, "üìù Aucune t√¢che trouv√©e") {
			t.Errorf("T√¢che termin√©e ne devrait plus appara√Ætre: %s", listOutput)
		}

		// V√©rifier qu'elle appara√Æt avec --all
		allOutput := h.assertCommandSuccess(t, "list", "--all")
		if !strings.Contains(allOutput, "‚úÖ") {
			t.Errorf("T√¢che termin√©e devrait appara√Ætre avec --all: %s", allOutput)
		}
	})

	t.Run("marquer t√¢che inexistante", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "done", "999")

		if !strings.Contains(output, "‚ùå T√¢che [999] introuvable") {
			t.Errorf("Message d'erreur manquant: %s", output)
		}
	})

	t.Run("ID invalide", func(t *testing.T) {
		h.assertCommandFails(t, 1, "done", "abc")
	})

	t.Run("sans ID", func(t *testing.T) {
		h.assertCommandFails(t, 1, "done")
	})
}

func TestCLI_Remove(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	// Ajouter des t√¢ches de test
	h.assertCommandSuccess(t, "add", "T√¢che √† supprimer")
	h.assertCommandSuccess(t, "add", "T√¢che √† garder")

	t.Run("supprimer t√¢che existante", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "remove", "1")

		if !strings.Contains(output, "üóëÔ∏è T√¢che [1] supprim√©e") {
			t.Errorf("Message de succ√®s manquant: %s", output)
		}

		// V√©rifier que seule la t√¢che 2 reste
		listOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listOutput, "T√¢che √† garder") {
			t.Errorf("T√¢che 2 devrait encore exister: %s", listOutput)
		}
		if strings.Contains(listOutput, "T√¢che √† supprimer") {
			t.Errorf("T√¢che 1 ne devrait plus exister: %s", listOutput)
		}
	})

	t.Run("supprimer t√¢che inexistante", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "remove", "999")

		if !strings.Contains(output, "‚ùå T√¢che [999] introuvable") {
			t.Errorf("Message d'erreur manquant: %s", output)
		}
	})
}

func TestCLI_Edit(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	// Ajouter une t√¢che de test
	h.assertCommandSuccess(t, "add", "Texte original", "+old")

	t.Run("modifier t√¢che existante", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "edit", "1", "Nouveau texte", "+new", "@context")

		if !strings.Contains(output, "‚úèÔ∏è T√¢che [1] modifi√©e") {
			t.Errorf("Message de succ√®s manquant: %s", output)
		}

		// V√©rifier les modifications dans la liste
		listOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listOutput, "Nouveau texte") {
			t.Errorf("Nouveau texte manquant: %s", listOutput)
		}
		if !strings.Contains(listOutput, "+new @context") {
			t.Errorf("Nouveaux tags manquants: %s", listOutput)
		}
		if strings.Contains(listOutput, "Texte original") {
			t.Errorf("Ancien texte ne devrait plus appara√Ætre: %s", listOutput)
		}
	})

	t.Run("modifier t√¢che inexistante", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "edit", "999", "Nouveau texte")

		if !strings.Contains(output, "‚ùå T√¢che [999] introuvable") {
			t.Errorf("Message d'erreur manquant: %s", output)
		}
	})

	t.Run("arguments insuffisants", func(t *testing.T) {
		h.assertCommandFails(t, 1, "edit", "1")
		h.assertCommandFails(t, 1, "edit")
	})
}

func TestCLI_Export(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	// Ajouter des t√¢ches de test
	h.assertCommandSuccess(t, "add", "T√¢che export 1", "+test")
	h.assertCommandSuccess(t, "add", "T√¢che export 2", "@context", "--priority=high")

	t.Run("export par d√©faut", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "export")

		if !strings.Contains(output, "üìÑ Export termin√© : todo_export.csv") {
			t.Errorf("Message de succ√®s manquant: %s", output)
		}

		// Le fichier est cr√©√© dans le r√©pertoire tempdir
		csvPath := filepath.Join(h.tempDir, "todo_export.csv")

		// Attendre un peu pour que le fichier soit cr√©√©
		time.Sleep(200 * time.Millisecond)

		if _, err := os.Stat(csvPath); os.IsNotExist(err) {
			// Debug en cas d'√©chec
			h.debugEnvironment(t)
			t.Errorf("Fichier CSV n'a pas √©t√© cr√©√© √† %s", csvPath)
			return
		}

		// V√©rifier le contenu
		content, err := ioutil.ReadFile(csvPath)
		if err != nil {
			t.Fatalf("Impossible de lire le fichier CSV: %v", err)
		}
		csvContent := string(content)

		if !strings.Contains(csvContent, "T√¢che export 1") {
			t.Errorf("T√¢che 1 manquante dans le CSV: %s", csvContent)
		}
		if !strings.Contains(csvContent, "T√¢che export 2") {
			t.Errorf("T√¢che 2 manquante dans le CSV: %s", csvContent)
		}
	})

	t.Run("export avec nom de fichier", func(t *testing.T) {
		customFile := "export_custom.csv"
		output := h.assertCommandSuccess(t, "export", customFile)

		if !strings.Contains(output, "üìÑ Export termin√© : "+customFile) {
			t.Errorf("Message de succ√®s incorrect: %s", output)
		}

		// Le fichier devrait √™tre dans .todo
		csvPath := filepath.Join(h.tempDir, customFile)
		time.Sleep(200 * time.Millisecond)

		if _, err := os.Stat(csvPath); os.IsNotExist(err) {
			h.debugEnvironment(t)
			t.Errorf("Fichier CSV personnalis√© n'a pas √©t√© cr√©√© √† %s", csvPath)
		}
	})
}

func TestCLI_Import(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	// CORRECTION: Utiliser des UUID v4 valides comme l'application les g√©n√®re
	csvContent := `ID,UUID,Text,Done,Priority,Due,Tags,Created,Updated
1,123e4567-e89b-42d3-a456-426614174000,"T√¢che import√©e 1",false,high,2025-07-25,"+import @test",2025-07-09 12:00:00,2025-07-09 12:00:00
2,987fcdeb-51d2-42d3-a456-426614174111,"T√¢che import√©e 2",true,medium,,"@test",2025-07-09 13:00:00,2025-07-09 13:00:00`

	csvFile := filepath.Join(h.tempDir, "import_test.csv")
	err := ioutil.WriteFile(csvFile, []byte(csvContent), 0644)
	if err != nil {
		t.Fatalf("Impossible de cr√©er le fichier CSV de test: %v", err)
	}

	t.Run("import basique", func(t *testing.T) {
		// Debug: v√©rifier que le fichier existe
		if _, err := os.Stat(csvFile); os.IsNotExist(err) {
			t.Fatalf("Fichier CSV de test n'existe pas: %s", csvFile)
		}

		output := h.assertCommandSuccess(t, "import", csvFile)

		if !strings.Contains(output, "üì• Import termin√©") {
			t.Errorf("Message de succ√®s manquant: %s", output)
		}
		if !strings.Contains(output, "‚úÖ 2 nouvelles t√¢ches") {
			t.Errorf("Compteur de nouvelles t√¢ches incorrect: %s", output)
		}

		// V√©rifier que les t√¢ches ont √©t√© import√©es
		listOutput := h.assertCommandSuccess(t, "list", "--all")
		if !strings.Contains(listOutput, "T√¢che import√©e 1") {
			t.Errorf("T√¢che 1 manquante apr√®s import: %s", listOutput)
		}
		if !strings.Contains(listOutput, "T√¢che import√©e 2") {
			t.Errorf("T√¢che 2 manquante apr√®s import: %s", listOutput)
		}
	})

	t.Run("import avec options", func(t *testing.T) {
		// Nettoyer d'abord
		os.Remove(h.todoFile)

		output := h.assertCommandSuccess(t, "import", csvFile, "--verbose", "--dry-run")

		if !strings.Contains(output, "üîç Mode dry-run") {
			t.Errorf("Indication dry-run manquante: %s", output)
		}

		// En mode dry-run, aucune t√¢che ne doit √™tre r√©ellement ajout√©e
		listOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listOutput, "üìù Aucune t√¢che trouv√©e") {
			t.Errorf("Des t√¢ches ont √©t√© ajout√©es en mode dry-run: %s", listOutput)
		}
	})

	t.Run("import fichier inexistant", func(t *testing.T) {
		h.assertCommandFails(t, 1, "import", "fichier_inexistant.csv")
	})

	t.Run("import sans arguments", func(t *testing.T) {
		h.assertCommandFails(t, 1, "import")
	})
}

func TestCLI_Help(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("aide principale", func(t *testing.T) {
		output := h.assertCommandSuccess(t, "help")

		// V√©rifier la pr√©sence des sections principales
		if !strings.Contains(output, "üìã Todo Manager CLI") {
			t.Errorf("Titre manquant: %s", output)
		}
		if !strings.Contains(output, "Usage:") {
			t.Errorf("Section Usage manquante: %s", output)
		}
		if !strings.Contains(output, "Exemples:") {
			t.Errorf("Section Exemples manquante: %s", output)
		}
	})

	t.Run("aide sans arguments", func(t *testing.T) {
		// Lancer sans arguments devrait afficher l'aide et sortir avec code 1
		h.assertCommandFails(t, 1)
	})

	t.Run("commande inconnue", func(t *testing.T) {
		h.assertCommandFails(t, 1, "commande_inexistante")
	})
}

// Tests End-to-End complets

func TestE2E_CompleteWorkflow(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("workflow complet de gestion de t√¢ches", func(t *testing.T) {
		// 1. Ajouter plusieurs t√¢ches avec diff√©rentes options
		h.assertCommandSuccess(t, "add", "Pr√©parer pr√©sentation", "+travail", "@bureau",
			"--priority=high", "--due=2025-07-20")
		h.assertCommandSuccess(t, "add", "Faire les courses", "+perso", "@supermarch√©",
			"--priority=medium")
		h.assertCommandSuccess(t, "add", "R√©viser Go", "+dev", "@maison", "--priority=low")
		h.assertCommandSuccess(t, "add", "Appeler dentiste", "+sant√©", "--priority=medium")

		// 2. Lister toutes les t√¢ches et v√©rifier l'ordre
		listOutput := h.assertCommandSuccess(t, "list")
		lines := strings.Split(strings.TrimSpace(listOutput), "\n")

		// Doit y avoir 4 lignes de t√¢ches
		if len(lines) != 4 {
			t.Errorf("Nombre de t√¢ches list√©es: attendu 4, obtenu %d", len(lines))
		}

		// La premi√®re doit √™tre la t√¢che high priority
		if !strings.Contains(lines[0], "Pr√©parer pr√©sentation") {
			t.Errorf("Tri par priorit√© incorrect, premi√®re ligne: %s", lines[0])
		}

		// 3. Filtrer par projet
		devOutput := h.assertCommandSuccess(t, "list", "--project=dev")
		if !strings.Contains(devOutput, "R√©viser Go") {
			t.Errorf("Filtrage par projet √©chou√©: %s", devOutput)
		}
		if strings.Contains(devOutput, "Faire les courses") {
			t.Errorf("Filtrage par projet inclut des t√¢ches incorrectes: %s", devOutput)
		}

		// 4. Marquer une t√¢che comme termin√©e
		h.assertCommandSuccess(t, "done", "2")

		// V√©rifier qu'elle n'appara√Æt plus dans la liste par d√©faut
		listAfterDone := h.assertCommandSuccess(t, "list")
		if strings.Contains(listAfterDone, "Faire les courses") {
			t.Errorf("T√¢che termin√©e appara√Æt encore: %s", listAfterDone)
		}

		// 5. Modifier une t√¢che
		h.assertCommandSuccess(t, "edit", "3", "R√©viser Go et faire exercices", "+dev", "+urgent", "@maison")

		editedOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(editedOutput, "R√©viser Go et faire exercices") {
			t.Errorf("Modification de texte √©chou√©e: %s", editedOutput)
		}

		// 6. Export
		h.assertCommandSuccess(t, "export", "workflow_test.csv")

		csvPath := filepath.Join(h.tempDir, "workflow_test.csv")
		time.Sleep(200 * time.Millisecond) // Attendre que le fichier soit cr√©√©

		if _, err := os.Stat(csvPath); os.IsNotExist(err) {
			h.debugEnvironment(t) // Debug en cas d'√©chec
			t.Fatalf("Fichier d'export non trouv√©: %s", csvPath)
		}

		content, err := ioutil.ReadFile(csvPath)
		if err != nil {
			t.Fatalf("Impossible de lire le fichier export√©: %v", err)
		}

		csvContent := string(content)
		if !strings.Contains(csvContent, "Pr√©parer pr√©sentation") {
			t.Errorf("Export incomplet: %s", csvContent)
		}

		// 7. Supprimer une t√¢che
		h.assertCommandSuccess(t, "remove", "4")

		listAfterRemove := h.assertCommandSuccess(t, "list")
		if strings.Contains(listAfterRemove, "Appeler dentiste") {
			t.Errorf("T√¢che supprim√©e appara√Æt encore: %s", listAfterRemove)
		}

		// 8. V√©rifier le statut final
		finalList := h.assertCommandSuccess(t, "list", "--all")

		// Doit contenir: 1 active (Pr√©parer pr√©sentation), 1 modifi√©e (R√©viser Go), 1 termin√©e (Faire les courses)
		allLines := strings.Split(strings.TrimSpace(finalList), "\n")
		if len(allLines) != 3 {
			t.Errorf("Nombre final de t√¢ches: attendu 3, obtenu %d", len(allLines))
		}
	})
}

func TestE2E_DataPersistence(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("persistance des donn√©es entre red√©marrages", func(t *testing.T) {
		// 1. Ajouter des t√¢ches
		h.assertCommandSuccess(t, "add", "T√¢che persistante 1", "+test")
		h.assertCommandSuccess(t, "add", "T√¢che persistante 2", "@context", "--priority=high")

		// 2. V√©rifier qu'elles sont list√©es
		firstList := h.assertCommandSuccess(t, "list")
		if !strings.Contains(firstList, "T√¢che persistante 1") {
			t.Errorf("T√¢che 1 manquante: %s", firstList)
		}

		// 3. Simuler red√©marrage en cr√©ant une nouvelle instance CLI
		// (le fichier JSON devrait persister)

		// 4. V√©rifier que les t√¢ches sont toujours l√†
		secondList := h.assertCommandSuccess(t, "list")
		if !strings.Contains(secondList, "T√¢che persistante 1") {
			t.Errorf("T√¢che 1 perdue apr√®s red√©marrage: %s", secondList)
		}
		if !strings.Contains(secondList, "T√¢che persistante 2") {
			t.Errorf("T√¢che 2 perdue apr√®s red√©marrage: %s", secondList)
		}

		// 5. V√©rifier que le fichier JSON existe et est valide
		if _, err := os.Stat(h.todoFile); os.IsNotExist(err) {
			t.Error("Fichier todo.json n'existe pas")
		}

		// Lire et parser le JSON
		content, err := ioutil.ReadFile(h.todoFile)
		if err != nil {
			t.Fatalf("Impossible de lire todo.json: %v", err)
		}

		var data map[string]interface{}
		err = json.Unmarshal(content, &data)
		if err != nil {
			t.Fatalf("JSON invalide: %v", err)
		}

		// V√©rifier la structure
		if _, ok := data["tasks"]; !ok {
			t.Error("Cl√© 'tasks' manquante dans le JSON")
		}
		if _, ok := data["nextId"]; !ok {
			t.Error("Cl√© 'nextId' manquante dans le JSON")
		}
	})
}

func TestE2E_ImportExportRoundTrip(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("round-trip export/import", func(t *testing.T) {
		// 1. Cr√©er des donn√©es de test plus simples pour √©viter les probl√®mes d'encodage
		h.assertCommandSuccess(t, "add", "T√¢che test 1", "+emoji", "@test", "--priority=high")
		h.assertCommandSuccess(t, "add", "T√¢che test 2", "+unicode", "--priority=medium", "--due=2025-12-25")
		h.assertCommandSuccess(t, "add", "T√¢che simple", "+basic")

		// Marquer une comme termin√©e
		h.assertCommandSuccess(t, "done", "3")

		// 2. Export
		exportFile := "roundtrip_test.csv"
		h.assertCommandSuccess(t, "export", exportFile)

		// 3. V√©rifier que le fichier d'export existe
		exportPath := filepath.Join(h.tempDir, exportFile)
		time.Sleep(200 * time.Millisecond)

		if _, err := os.Stat(exportPath); os.IsNotExist(err) {
			h.debugEnvironment(t)
			t.Fatalf("Fichier d'export n'a pas √©t√© cr√©√©: %s", exportPath)
		}

		// 4. R√©initialiser (simuler nouvelle installation)
		err := os.Remove(h.todoFile)
		if err != nil {
			t.Fatalf("Impossible de supprimer le fichier todo: %v", err)
		}

		// 5. Import
		output := h.assertCommandSuccess(t, "import", exportPath, "--verbose")

		if !strings.Contains(output, "üì• Import termin√©") {
			t.Errorf("Message d'import manquant: %s", output)
		}

		// 6. V√©rifier que les donn√©es sont identiques
		importedList := h.assertCommandSuccess(t, "list", "--all")

		// V√©rifications simplifi√©es
		if !strings.Contains(importedList, "T√¢che test 1") {
			t.Errorf("T√¢che 1 manquante: %s", importedList)
		}
		if !strings.Contains(importedList, "T√¢che test 2") {
			t.Errorf("T√¢che 2 manquante: %s", importedList)
		}
		if !strings.Contains(importedList, "‚úÖ") { // T√¢che termin√©e
			t.Errorf("Statut Done perdu: %s", importedList)
		}

		// V√©rifier que les priorit√©s sont pr√©serv√©es
		if !strings.Contains(importedList, "‚ùó") { // Priorit√© high
			t.Errorf("Priorit√© high perdue: %s", importedList)
		}
	})
}

// Tests de stress et performance

func TestE2E_StressTest(t *testing.T) {
	if testing.Short() {
		t.Skip("Test de stress ignor√© en mode court")
	}

	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("gestion de nombreuses t√¢ches", func(t *testing.T) {
		// Ajouter 100 t√¢ches
		start := time.Now()
		for i := 1; i <= 100; i++ {
			h.assertCommandSuccess(t, "add", fmt.Sprintf("T√¢che stress %d", i), "+stress")
		}
		addDuration := time.Since(start)
		t.Logf("Temps pour ajouter 100 t√¢ches: %v", addDuration)

		// Lister toutes les t√¢ches
		start = time.Now()
		output := h.assertCommandSuccess(t, "list")
		listDuration := time.Since(start)
		t.Logf("Temps pour lister 100 t√¢ches: %v", listDuration)

		// V√©rifier que toutes sont pr√©sentes
		lines := strings.Split(strings.TrimSpace(output), "\n")
		if len(lines) != 100 {
			t.Errorf("Nombre de t√¢ches list√©es: attendu 100, obtenu %d", len(lines))
		}

		// Export
		start = time.Now()
		h.assertCommandSuccess(t, "export", "stress_test.csv")
		exportDuration := time.Since(start)
		t.Logf("Temps pour exporter 100 t√¢ches: %v", exportDuration)

		// V√©rifications de performance (limites raisonnables)
		if addDuration > 10*time.Second {
			t.Errorf("Ajout de 100 t√¢ches trop lent: %v", addDuration)
		}
		if listDuration > 2*time.Second {
			t.Errorf("Listing de 100 t√¢ches trop lent: %v", listDuration)
		}
		if exportDuration > 2*time.Second {
			t.Errorf("Export de 100 t√¢ches trop lent: %v", exportDuration)
		}
	})
}

// Tests de robustesse

func TestE2E_ErrorRecovery(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("r√©cup√©ration apr√®s fichier corrompu", func(t *testing.T) {
		// 1. Ajouter des t√¢ches normalement
		h.assertCommandSuccess(t, "add", "T√¢che avant corruption")

		// 2. Corrompre le fichier JSON
		corruptedJSON := `{"tasks": [invalid json content`
		err := ioutil.WriteFile(h.todoFile, []byte(corruptedJSON), 0644)
		if err != nil {
			t.Fatalf("Impossible de corrompre le fichier: %v", err)
		}

		// 3. L'application devrait g√©rer l'erreur gracieusement
		output := h.assertCommandSuccess(t, "list")

		// Devrait indiquer qu'il n'y a pas de t√¢ches (nouveau d√©marrage)
		if !strings.Contains(output, "üìù Aucune t√¢che trouv√©e") {
			t.Errorf("Application n'a pas r√©cup√©r√© gracieusement: %s", output)
		}

		// 4. Ajouter une nouvelle t√¢che devrait fonctionner
		h.assertCommandSuccess(t, "add", "T√¢che apr√®s r√©cup√©ration")

		listAfterRecovery := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listAfterRecovery, "T√¢che apr√®s r√©cup√©ration") {
			t.Errorf("Application ne fonctionne plus apr√®s r√©cup√©ration: %s", listAfterRecovery)
		}
	})

	t.Run("gestion des permissions", func(t *testing.T) {
		// Ce test est difficile √† impl√©menter de mani√®re portable
		// mais pourrait √™tre ajout√© pour des tests sp√©cifiques Unix
		t.Skip("Test de permissions √† impl√©menter selon la plateforme")
	})
}

// Tests de cas limites

func TestE2E_EdgeCases(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("texte avec caract√®res sp√©ciaux", func(t *testing.T) {
		// Tester diff√©rents caract√®res sp√©ciaux
		specialTexts := []string{
			"T√¢che avec √†√©√®√ß√π",
			"Task with emoji üöÄüìã",
			"T√¢che avec guillemets doubles",
			"T√¢che avec apostrophes simples",
			"T√¢che avec caract√®res sp√©ciaux #@$%",
		}

		for i, text := range specialTexts {
			t.Run(fmt.Sprintf("text_%d", i), func(t *testing.T) {
				output := h.assertCommandSuccess(t, "add", text, "+special")
				if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
					t.Errorf("√âchec ajout texte sp√©cial: %s", text)
				}

				// V√©rifier que la t√¢che est list√©e correctement
				listOutput := h.assertCommandSuccess(t, "list")
				if !strings.Contains(listOutput, text) {
					t.Errorf("Texte sp√©cial non trouv√© dans la liste: %s", text)
				}
			})
		}
	})

	t.Run("texte tr√®s long", func(t *testing.T) {
		longText := strings.Repeat("Tr√®s long texte ", 50) // ~800 caract√®res

		output := h.assertCommandSuccess(t, "add", longText, "+long")
		if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
			t.Errorf("√âchec ajout texte long")
		}

		// V√©rifier que le texte long est g√©r√© correctement
		listOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listOutput, "Tr√®s long texte") {
			t.Errorf("Texte long non trouv√© dans la liste")
		}
	})

	t.Run("beaucoup de tags", func(t *testing.T) {
		manyTags := []string{"+tag1", "+tag2", "+tag3", "@context1", "@context2", "@context3"}

		args := []string{"add", "T√¢che avec beaucoup de tags"}
		args = append(args, manyTags...)

		output := h.assertCommandSuccess(t, args...)
		if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
			t.Errorf("√âchec ajout avec beaucoup de tags")
		}

		// V√©rifier que tous les tags sont pr√©sents
		listOutput := h.assertCommandSuccess(t, "list")
		for _, tag := range manyTags {
			if !strings.Contains(listOutput, tag) {
				t.Errorf("Tag manquant: %s", tag)
			}
		}
	})

	t.Run("dates limites diverses", func(t *testing.T) {
		testDates := []struct {
			date        string
			shouldWork  bool
			description string
		}{
			{"2025-07-20", true, "date normale"},
			{"2025-12-31", true, "fin d'ann√©e"},
			{"2025-01-01", true, "d√©but d'ann√©e"},
			{"2025-02-29", false, "29 f√©vrier ann√©e non bissextile"},
			{"2025-13-01", false, "mois invalide"},
			{"2025-07-32", false, "jour invalide"},
		}

		for _, test := range testDates {
			t.Run(test.description, func(t *testing.T) {
				if test.shouldWork {
					output := h.assertCommandSuccess(t, "add", "Test date "+test.description,
						"--due="+test.date)
					if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
						t.Errorf("Date valide rejet√©e: %s", test.date)
					}
				} else {
					h.assertCommandFails(t, 1, "add", "Test date "+test.description,
						"--due="+test.date)
				}
			})
		}
	})
}

// Tests de compatibilit√©

func TestE2E_Compatibility(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("export import avec diff√©rents formats", func(t *testing.T) {
		// Cr√©er des t√¢ches avec tous les types de donn√©es
		h.assertCommandSuccess(t, "add", "T√¢che compl√®te", "+projet", "@lieu",
			"--priority=high", "--due=2025-07-20")
		h.assertCommandSuccess(t, "add", "T√¢che simple")
		h.assertCommandSuccess(t, "add", "T√¢che avec √©mojis üéØ", "+fun")

		// Marquer une comme termin√©e
		h.assertCommandSuccess(t, "done", "2")

		// Export
		h.assertCommandSuccess(t, "export", "compatibility_test.csv")

		// V√©rifier le fichier CSV
		csvPath := filepath.Join(h.tempDir, "compatibility_test.csv")
		time.Sleep(200 * time.Millisecond)

		if _, err := os.Stat(csvPath); os.IsNotExist(err) {
			t.Fatal("Fichier d'export non cr√©√©")
		}

		// Lire et v√©rifier le contenu CSV
		content, err := ioutil.ReadFile(csvPath)
		if err != nil {
			t.Fatalf("Impossible de lire le CSV: %v", err)
		}

		csvContent := string(content)

		// V√©rifier l'en-t√™te
		if !strings.Contains(csvContent, "ID,UUID,Text,Done,Priority,Due,Tags,Created,Updated") {
			t.Error("En-t√™te CSV incorrect")
		}

		// V√©rifier les donn√©es
		if !strings.Contains(csvContent, "T√¢che compl√®te") {
			t.Error("T√¢che compl√®te manquante dans CSV")
		}
		if !strings.Contains(csvContent, "high") {
			t.Error("Priorit√© manquante dans CSV")
		}

		// Test d'import de retour
		os.Remove(h.todoFile) // Reset

		h.assertCommandSuccess(t, "import", csvPath)

		// V√©rifier que tout a √©t√© import√©
		listOutput := h.assertCommandSuccess(t, "list", "--all")
		if !strings.Contains(listOutput, "T√¢che compl√®te") {
			t.Error("Import √©chou√© pour t√¢che compl√®te")
		}
		if !strings.Contains(listOutput, "‚úÖ") { // T√¢che termin√©e
			t.Error("Statut Done perdu lors de l'import")
		}
	})
}

// Tests de performance d√©taill√©s

func TestE2E_PerformanceDetailed(t *testing.T) {
	if testing.Short() {
		t.Skip("Tests de performance ignor√©s en mode court")
	}

	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("performance op√©rations individuelles", func(t *testing.T) {
		// Test performance ajout
		start := time.Now()
		h.assertCommandSuccess(t, "add", "Test performance", "+perf")
		addTime := time.Since(start)
		t.Logf("Temps ajout: %v", addTime)

		if addTime > 500*time.Millisecond {
			t.Errorf("Ajout trop lent: %v", addTime)
		}

		// Test performance listing
		start = time.Now()
		h.assertCommandSuccess(t, "list")
		listTime := time.Since(start)
		t.Logf("Temps listing: %v", listTime)

		if listTime > 200*time.Millisecond {
			t.Errorf("Listing trop lent: %v", listTime)
		}

		// Test performance modification
		start = time.Now()
		h.assertCommandSuccess(t, "edit", "1", "Texte modifi√©", "+modif")
		editTime := time.Since(start)
		t.Logf("Temps modification: %v", editTime)

		if editTime > 500*time.Millisecond {
			t.Errorf("Modification trop lente: %v", editTime)
		}
	})

	t.Run("performance avec filtres", func(t *testing.T) {
		// Ajouter plusieurs t√¢ches avec diff√©rents tags
		for i := 0; i < 50; i++ {
			project := fmt.Sprintf("+proj%d", i%5)
			context := fmt.Sprintf("@ctx%d", i%3)
			priority := []string{"low", "medium", "high"}[i%3]

			h.assertCommandSuccess(t, "add", fmt.Sprintf("T√¢che %d", i),
				project, context, "--priority="+priority)
		}

		// Test performance filtrage par projet
		start := time.Now()
		h.assertCommandSuccess(t, "list", "--project=proj1")
		filterTime := time.Since(start)
		t.Logf("Temps filtrage projet: %v", filterTime)

		if filterTime > 300*time.Millisecond {
			t.Errorf("Filtrage trop lent: %v", filterTime)
		}

		// Test performance filtrage combin√©
		start = time.Now()
		h.assertCommandSuccess(t, "list", "--project=proj1", "--context=ctx1", "--priority=high")
		complexFilterTime := time.Since(start)
		t.Logf("Temps filtrage complexe: %v", complexFilterTime)

		if complexFilterTime > 400*time.Millisecond {
			t.Errorf("Filtrage complexe trop lent: %v", complexFilterTime)
		}
	})
}

// Tests de s√©curit√© basiques

func TestE2E_BasicSecurity(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("injection de commandes", func(t *testing.T) {
		// Tenter d'injecter des commandes dans le texte
		maliciousTexts := []string{
			"T√¢che normale; rm -rf /",
			"T√¢che $(whoami)",
			"T√¢che `echo test`",
			"T√¢che && echo injection",
			"T√¢che | cat /etc/passwd",
		}

		for i, text := range maliciousTexts {
			t.Run(fmt.Sprintf("injection_%d", i), func(t *testing.T) {
				output := h.assertCommandSuccess(t, "add", text)
				if !strings.Contains(output, "‚úÖ T√¢che ajout√©e") {
					t.Errorf("Texte rejet√© √† tort: %s", text)
				}

				// V√©rifier que la t√¢che est stock√©e telle quelle
				listOutput := h.assertCommandSuccess(t, "list")
				if !strings.Contains(listOutput, text) {
					t.Errorf("Texte modifi√© de mani√®re inattendue: %s", text)
				}
			})
		}
	})

	t.Run("chemins de fichiers dangereux", func(t *testing.T) {
		// Tenter d'exporter vers des chemins dangereux
		dangerousPaths := []string{
			"../../../etc/passwd",
			"/etc/hosts",
			"~/.bashrc",
		}

		for _, path := range dangerousPaths {
			// Ces commandes devraient √©chouer ou √™tre contenues dans le r√©pertoire s√ªr
			_, _, exitCode, _ := h.runCommand("export", path)
			// Nous ne testons pas l'√©chec car l'application peut cr√©er des fichiers relatifs
			// L'important est qu'elle ne cr√©e pas de fichiers dans des emplacements sensibles
			t.Logf("Export vers %s: code de sortie %d", path, exitCode)
		}
	})
}

// Tests de r√©gression

func TestE2E_Regression(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("bug regression IDs apr√®s suppression", func(t *testing.T) {
		// Ajouter 3 t√¢ches
		h.assertCommandSuccess(t, "add", "T√¢che 1")
		h.assertCommandSuccess(t, "add", "T√¢che 2")
		h.assertCommandSuccess(t, "add", "T√¢che 3")

		// Supprimer la t√¢che du milieu
		h.assertCommandSuccess(t, "remove", "2")

		// Ajouter une nouvelle t√¢che
		h.assertCommandSuccess(t, "add", "T√¢che 4")

		// V√©rifier que les IDs sont coh√©rents
		listOutput := h.assertCommandSuccess(t, "list")
		lines := strings.Split(strings.TrimSpace(listOutput), "\n")

		if len(lines) != 3 {
			t.Errorf("Nombre de t√¢ches incorrect: %d", len(lines))
		}

		// V√©rifier qu'on peut manipuler toutes les t√¢ches par ID
		h.assertCommandSuccess(t, "done", "1") // Doit marcher
		h.assertCommandSuccess(t, "done", "3") // Doit marcher
		h.assertCommandSuccess(t, "done", "4") // Doit marcher
	})

	t.Run("bug regression tags avec espaces", func(t *testing.T) {
		// Certains utilisateurs pourraient essayer d'ajouter des tags avec espaces
		h.assertCommandSuccess(t, "add", "T√¢che test", "+tag avec espaces")

		// V√©rifier que le tag est trait√© correctement (probablement s√©par√©)
		listOutput := h.assertCommandSuccess(t, "list")
		if !strings.Contains(listOutput, "T√¢che test") {
			t.Error("T√¢che avec tag espac√© non trouv√©e")
		}
	})

	t.Run("bug regression export fichier vide", func(t *testing.T) {
		// Exporter quand il n'y a pas de t√¢ches
		h.assertCommandSuccess(t, "export", "empty_test.csv")

		csvPath := filepath.Join(h.tempDir, "empty_test.csv")
		time.Sleep(200 * time.Millisecond)

		if _, err := os.Stat(csvPath); os.IsNotExist(err) {
			t.Error("Export avec liste vide devrait cr√©er un fichier")
		}

		// V√©rifier que le fichier contient au moins l'en-t√™te
		content, err := ioutil.ReadFile(csvPath)
		if err != nil {
			t.Fatalf("Impossible de lire le fichier vide: %v", err)
		}

		if !strings.Contains(string(content), "ID,UUID,Text") {
			t.Error("En-t√™te manquant dans export vide")
		}
	})
}

// Tests finaux de validation

func TestE2E_FinalValidation(t *testing.T) {
	h := setupCLITest(t)
	defer h.cleanup()
	h.compileBinary(t)

	t.Run("workflow utilisateur r√©aliste", func(t *testing.T) {
		// Simuler l'usage d'un utilisateur r√©el pendant une semaine

		// Lundi: ajouter des t√¢ches de travail
		h.assertCommandSuccess(t, "add", "R√©union √©quipe", "+travail", "@bureau", "--priority=high", "--due=2025-07-14")
		h.assertCommandSuccess(t, "add", "Finir rapport", "+travail", "@bureau", "--priority=medium", "--due=2025-07-16")
		h.assertCommandSuccess(t, "add", "R√©pondre emails", "+travail", "@bureau", "--priority=low")

		// Mardi: ajouter des t√¢ches personnelles
		h.assertCommandSuccess(t, "add", "Courses alimentaires", "+perso", "@supermarch√©", "--priority=medium")
		h.assertCommandSuccess(t, "add", "Appeler m√©decin", "+sant√©", "@t√©l√©phone", "--priority=high")

		// Mercredi: compl√©ter quelques t√¢ches
		h.assertCommandSuccess(t, "done", "1") // R√©union √©quipe
		h.assertCommandSuccess(t, "done", "3") // R√©pondre emails

		// Jeudi: modifier une t√¢che
		h.assertCommandSuccess(t, "edit", "2", "Finir et envoyer rapport", "+travail", "+urgent", "@bureau")

		// Vendredi: voir le statut
		listOutput := h.assertCommandSuccess(t, "list")

		// V√©rifier que le workflow fonctionne
		if !strings.Contains(listOutput, "Finir et envoyer rapport") {
			t.Error("Modification de t√¢che √©chou√©e")
		}
		if !strings.Contains(listOutput, "+urgent") {
			t.Error("Nouveau tag non ajout√©")
		}

		// Weekend: export pour sauvegarde
		h.assertCommandSuccess(t, "export", "week_backup.csv")

		// V√©rifier l'export
		csvPath := filepath.Join(h.tempDir, "week_backup.csv")
		time.Sleep(200 * time.Millisecond)

		if _, err := os.Stat(csvPath); os.IsNotExist(err) {
			t.Error("Sauvegarde hebdomadaire √©chou√©e")
		}

		// Afficher toutes les t√¢ches pour validation finale
		allTasks := h.assertCommandSuccess(t, "list", "--all")
		t.Logf("√âtat final des t√¢ches:\n%s", allTasks)

		// Compter les t√¢ches termin√©es et actives
		lines := strings.Split(strings.TrimSpace(allTasks), "\n")
		completed := 0
		active := 0

		for _, line := range lines {
			if strings.Contains(line, "‚úÖ") {
				completed++
			} else if strings.Contains(line, "‚≠ï") {
				active++
			}
		}

		if completed != 2 {
			t.Errorf("Nombre de t√¢ches termin√©es incorrect: %d", completed)
		}
		if active != 3 {
			t.Errorf("Nombre de t√¢ches actives incorrect: %d", active)
		}

		t.Logf("‚úÖ Workflow r√©ussi: %d t√¢ches termin√©es, %d actives", completed, active)
	})
}

// Fonction utilitaire pour nettoyer les tests
func cleanupAllTests() {
	// Cette fonction pourrait √™tre appel√©e pour nettoyer apr√®s tous les tests
	// Par exemple, supprimer tous les fichiers temporaires restants
}
